/* 
 * ClickSend v3 API
 *
 *  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 
 *
 * OpenAPI spec version: 3.1
 * Contact: support@clicksend.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using IO.ClickSend.ClickSend.Model;
using RestSharp;
using IO.ClickSend.Client;

namespace IO.ClickSend.ClickSend.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update all scheduled message as cancelled
        /// </summary>
        /// <remarks>
        /// Update all scheduled message as cancelled
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string SmsCancelAllPut ();

        /// <summary>
        /// Update all scheduled message as cancelled
        /// </summary>
        /// <remarks>
        /// Update all scheduled message as cancelled
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsCancelAllPutWithHttpInfo ();
        /// <summary>
        /// Update scheduled message as cancelled
        /// </summary>
        /// <remarks>
        /// Update scheduled message as cancelled
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The message ID you want to cancel</param>
        /// <returns>string</returns>
        string SmsCancelByMessageIdPut (string messageId);

        /// <summary>
        /// Update scheduled message as cancelled
        /// </summary>
        /// <remarks>
        /// Update scheduled message as cancelled
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The message ID you want to cancel</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsCancelByMessageIdPutWithHttpInfo (string messageId);
        /// <summary>
        /// Export all sms history
        /// </summary>
        /// <remarks>
        /// Export all sms history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Filename to download history as</param>
        /// <returns>string</returns>
        string SmsHistoryExportGet (string filename);

        /// <summary>
        /// Export all sms history
        /// </summary>
        /// <remarks>
        /// Export all sms history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Filename to download history as</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsHistoryExportGetWithHttpInfo (string filename);
        /// <summary>
        /// Get all sms history
        /// </summary>
        /// <remarks>
        /// Get all sms history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Custom query Example: from:{number},status_code:201. (optional)</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        string SmsHistoryGet (string q = null, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get all sms history
        /// </summary>
        /// <remarks>
        /// Get all sms history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Custom query Example: from:{number},status_code:201. (optional)</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsHistoryGetWithHttpInfo (string q = null, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null);
        /// <summary>
        /// Get all inbound sms
        /// </summary>
        /// <remarks>
        /// Get all inbound sms
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Your keyword or query. (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        string SmsInboundGet (string q = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get all inbound sms
        /// </summary>
        /// <remarks>
        /// Get all inbound sms
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Your keyword or query. (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsInboundGetWithHttpInfo (string q = null, int? page = null, int? limit = null);
        /// <summary>
        /// Create inbound sms
        /// </summary>
        /// <remarks>
        /// Create inbound sms
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>string</returns>
        string SmsInboundPost (Url url);

        /// <summary>
        /// Create inbound sms
        /// </summary>
        /// <remarks>
        /// Create inbound sms
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsInboundPostWithHttpInfo (Url url);
        /// <summary>
        /// Mark inbound SMS as read
        /// </summary>
        /// <remarks>
        /// Mark specific inbound SMS as read
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>string</returns>
        string SmsInboundReadByMessageIdPut (string messageId);

        /// <summary>
        /// Mark inbound SMS as read
        /// </summary>
        /// <remarks>
        /// Mark specific inbound SMS as read
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsInboundReadByMessageIdPutWithHttpInfo (string messageId);
        /// <summary>
        /// Mark inbound SMS as read
        /// </summary>
        /// <remarks>
        /// Mark all inbound SMS as read optionally before a certain date
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>string</returns>
        string SmsInboundReadPut (DateBefore dateBefore = null);

        /// <summary>
        /// Mark inbound SMS as read
        /// </summary>
        /// <remarks>
        /// Mark all inbound SMS as read optionally before a certain date
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsInboundReadPutWithHttpInfo (DateBefore dateBefore = null);
        /// <summary>
        /// Calculate sms price
        /// </summary>
        /// <remarks>
        /// Calculate sms price
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>string</returns>
        string SmsPricePost (SmsMessageCollection smsMessages);

        /// <summary>
        /// Calculate sms price
        /// </summary>
        /// <remarks>
        /// Calculate sms price
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsPricePostWithHttpInfo (SmsMessageCollection smsMessages);
        /// <summary>
        /// Get a Specific Delivery Receipt
        /// </summary>
        /// <remarks>
        /// Get a Specific Delivery Receipt
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>string</returns>
        string SmsReceiptsByMessageIdGet (string messageId);

        /// <summary>
        /// Get a Specific Delivery Receipt
        /// </summary>
        /// <remarks>
        /// Get a Specific Delivery Receipt
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsReceiptsByMessageIdGetWithHttpInfo (string messageId);
        /// <summary>
        /// Get all delivery receipts
        /// </summary>
        /// <remarks>
        /// Get all delivery receipts
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        string SmsReceiptsGet (int? page = null, int? limit = null);

        /// <summary>
        /// Get all delivery receipts
        /// </summary>
        /// <remarks>
        /// Get all delivery receipts
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsReceiptsGetWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Add a delivery receipt
        /// </summary>
        /// <remarks>
        /// Add a delivery receipt
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>string</returns>
        string SmsReceiptsPost (Url url);

        /// <summary>
        /// Add a delivery receipt
        /// </summary>
        /// <remarks>
        /// Add a delivery receipt
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsReceiptsPostWithHttpInfo (Url url);
        /// <summary>
        /// Mark delivery receipts as read
        /// </summary>
        /// <remarks>
        /// Mark delivery receipts as read
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>string</returns>
        string SmsReceiptsReadPut (DateBefore dateBefore = null);

        /// <summary>
        /// Mark delivery receipts as read
        /// </summary>
        /// <remarks>
        /// Mark delivery receipts as read
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsReceiptsReadPutWithHttpInfo (DateBefore dateBefore = null);
        /// <summary>
        /// Send sms message(s)
        /// </summary>
        /// <remarks>
        ///  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.* 
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>string</returns>
        string SmsSendPost (SmsMessageCollection smsMessages);

        /// <summary>
        /// Send sms message(s)
        /// </summary>
        /// <remarks>
        ///  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.* 
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsSendPostWithHttpInfo (SmsMessageCollection smsMessages);
        /// <summary>
        /// Delete sms template
        /// </summary>
        /// <remarks>
        /// Delete sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <returns>string</returns>
        string SmsTemplatesByTemplateIdDelete (int? templateId);

        /// <summary>
        /// Delete sms template
        /// </summary>
        /// <remarks>
        /// Delete sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsTemplatesByTemplateIdDeleteWithHttpInfo (int? templateId);
        /// <summary>
        /// Update sms template
        /// </summary>
        /// <remarks>
        /// Update sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <param name="smsTemplate">Template item</param>
        /// <returns>string</returns>
        string SmsTemplatesByTemplateIdPut (int? templateId, SmsTemplate smsTemplate);

        /// <summary>
        /// Update sms template
        /// </summary>
        /// <remarks>
        /// Update sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <param name="smsTemplate">Template item</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsTemplatesByTemplateIdPutWithHttpInfo (int? templateId, SmsTemplate smsTemplate);
        /// <summary>
        /// Get lists of all sms templates
        /// </summary>
        /// <remarks>
        /// Get lists of all sms templates
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        string SmsTemplatesGet (int? page = null, int? limit = null);

        /// <summary>
        /// Get lists of all sms templates
        /// </summary>
        /// <remarks>
        /// Get lists of all sms templates
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsTemplatesGetWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Create sms template
        /// </summary>
        /// <remarks>
        /// Create sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate">SmsTemplate model</param>
        /// <returns>string</returns>
        string SmsTemplatesPost (SmsTemplate smsTemplate);

        /// <summary>
        /// Create sms template
        /// </summary>
        /// <remarks>
        /// Create sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate">SmsTemplate model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsTemplatesPostWithHttpInfo (SmsTemplate smsTemplate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Update all scheduled message as cancelled
        /// </summary>
        /// <remarks>
        /// Update all scheduled message as cancelled
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsCancelAllPutAsync ();

        /// <summary>
        /// Update all scheduled message as cancelled
        /// </summary>
        /// <remarks>
        /// Update all scheduled message as cancelled
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsCancelAllPutAsyncWithHttpInfo ();
        /// <summary>
        /// Update scheduled message as cancelled
        /// </summary>
        /// <remarks>
        /// Update scheduled message as cancelled
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The message ID you want to cancel</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsCancelByMessageIdPutAsync (string messageId);

        /// <summary>
        /// Update scheduled message as cancelled
        /// </summary>
        /// <remarks>
        /// Update scheduled message as cancelled
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The message ID you want to cancel</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsCancelByMessageIdPutAsyncWithHttpInfo (string messageId);
        /// <summary>
        /// Export all sms history
        /// </summary>
        /// <remarks>
        /// Export all sms history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Filename to download history as</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsHistoryExportGetAsync (string filename);

        /// <summary>
        /// Export all sms history
        /// </summary>
        /// <remarks>
        /// Export all sms history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Filename to download history as</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsHistoryExportGetAsyncWithHttpInfo (string filename);
        /// <summary>
        /// Get all sms history
        /// </summary>
        /// <remarks>
        /// Get all sms history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Custom query Example: from:{number},status_code:201. (optional)</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsHistoryGetAsync (string q = null, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get all sms history
        /// </summary>
        /// <remarks>
        /// Get all sms history
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Custom query Example: from:{number},status_code:201. (optional)</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsHistoryGetAsyncWithHttpInfo (string q = null, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null);
        /// <summary>
        /// Get all inbound sms
        /// </summary>
        /// <remarks>
        /// Get all inbound sms
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Your keyword or query. (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsInboundGetAsync (string q = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get all inbound sms
        /// </summary>
        /// <remarks>
        /// Get all inbound sms
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Your keyword or query. (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsInboundGetAsyncWithHttpInfo (string q = null, int? page = null, int? limit = null);
        /// <summary>
        /// Create inbound sms
        /// </summary>
        /// <remarks>
        /// Create inbound sms
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsInboundPostAsync (Url url);

        /// <summary>
        /// Create inbound sms
        /// </summary>
        /// <remarks>
        /// Create inbound sms
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsInboundPostAsyncWithHttpInfo (Url url);
        /// <summary>
        /// Mark inbound SMS as read
        /// </summary>
        /// <remarks>
        /// Mark specific inbound SMS as read
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsInboundReadByMessageIdPutAsync (string messageId);

        /// <summary>
        /// Mark inbound SMS as read
        /// </summary>
        /// <remarks>
        /// Mark specific inbound SMS as read
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsInboundReadByMessageIdPutAsyncWithHttpInfo (string messageId);
        /// <summary>
        /// Mark inbound SMS as read
        /// </summary>
        /// <remarks>
        /// Mark all inbound SMS as read optionally before a certain date
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsInboundReadPutAsync (DateBefore dateBefore = null);

        /// <summary>
        /// Mark inbound SMS as read
        /// </summary>
        /// <remarks>
        /// Mark all inbound SMS as read optionally before a certain date
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsInboundReadPutAsyncWithHttpInfo (DateBefore dateBefore = null);
        /// <summary>
        /// Calculate sms price
        /// </summary>
        /// <remarks>
        /// Calculate sms price
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsPricePostAsync (SmsMessageCollection smsMessages);

        /// <summary>
        /// Calculate sms price
        /// </summary>
        /// <remarks>
        /// Calculate sms price
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsPricePostAsyncWithHttpInfo (SmsMessageCollection smsMessages);
        /// <summary>
        /// Get a Specific Delivery Receipt
        /// </summary>
        /// <remarks>
        /// Get a Specific Delivery Receipt
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsReceiptsByMessageIdGetAsync (string messageId);

        /// <summary>
        /// Get a Specific Delivery Receipt
        /// </summary>
        /// <remarks>
        /// Get a Specific Delivery Receipt
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsReceiptsByMessageIdGetAsyncWithHttpInfo (string messageId);
        /// <summary>
        /// Get all delivery receipts
        /// </summary>
        /// <remarks>
        /// Get all delivery receipts
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsReceiptsGetAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all delivery receipts
        /// </summary>
        /// <remarks>
        /// Get all delivery receipts
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsReceiptsGetAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Add a delivery receipt
        /// </summary>
        /// <remarks>
        /// Add a delivery receipt
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsReceiptsPostAsync (Url url);

        /// <summary>
        /// Add a delivery receipt
        /// </summary>
        /// <remarks>
        /// Add a delivery receipt
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsReceiptsPostAsyncWithHttpInfo (Url url);
        /// <summary>
        /// Mark delivery receipts as read
        /// </summary>
        /// <remarks>
        /// Mark delivery receipts as read
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsReceiptsReadPutAsync (DateBefore dateBefore = null);

        /// <summary>
        /// Mark delivery receipts as read
        /// </summary>
        /// <remarks>
        /// Mark delivery receipts as read
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsReceiptsReadPutAsyncWithHttpInfo (DateBefore dateBefore = null);
        /// <summary>
        /// Send sms message(s)
        /// </summary>
        /// <remarks>
        ///  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.* 
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsSendPostAsync (SmsMessageCollection smsMessages);

        /// <summary>
        /// Send sms message(s)
        /// </summary>
        /// <remarks>
        ///  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.* 
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsSendPostAsyncWithHttpInfo (SmsMessageCollection smsMessages);
        /// <summary>
        /// Delete sms template
        /// </summary>
        /// <remarks>
        /// Delete sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsTemplatesByTemplateIdDeleteAsync (int? templateId);

        /// <summary>
        /// Delete sms template
        /// </summary>
        /// <remarks>
        /// Delete sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsTemplatesByTemplateIdDeleteAsyncWithHttpInfo (int? templateId);
        /// <summary>
        /// Update sms template
        /// </summary>
        /// <remarks>
        /// Update sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <param name="smsTemplate">Template item</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsTemplatesByTemplateIdPutAsync (int? templateId, SmsTemplate smsTemplate);

        /// <summary>
        /// Update sms template
        /// </summary>
        /// <remarks>
        /// Update sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <param name="smsTemplate">Template item</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsTemplatesByTemplateIdPutAsyncWithHttpInfo (int? templateId, SmsTemplate smsTemplate);
        /// <summary>
        /// Get lists of all sms templates
        /// </summary>
        /// <remarks>
        /// Get lists of all sms templates
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsTemplatesGetAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get lists of all sms templates
        /// </summary>
        /// <remarks>
        /// Get lists of all sms templates
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsTemplatesGetAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Create sms template
        /// </summary>
        /// <remarks>
        /// Create sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate">SmsTemplate model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsTemplatesPostAsync (SmsTemplate smsTemplate);

        /// <summary>
        /// Create sms template
        /// </summary>
        /// <remarks>
        /// Create sms template
        /// </remarks>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate">SmsTemplate model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsTemplatesPostAsyncWithHttpInfo (SmsTemplate smsTemplate);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SMSApi : ISMSApi
    {
        private IO.ClickSend.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SMSApi(string basePath)
        {
            this.Configuration = new IO.ClickSend.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.ClickSend.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SMSApi(IO.ClickSend.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.ClickSend.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.ClickSend.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.ClickSend.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.ClickSend.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Update all scheduled message as cancelled Update all scheduled message as cancelled
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string SmsCancelAllPut ()
        {
             ApiResponse<string> localVarResponse = SmsCancelAllPutWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update all scheduled message as cancelled Update all scheduled message as cancelled
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsCancelAllPutWithHttpInfo ()
        {

            var localVarPath = "/sms/cancel-all";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsCancelAllPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update all scheduled message as cancelled Update all scheduled message as cancelled
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsCancelAllPutAsync ()
        {
             ApiResponse<string> localVarResponse = await SmsCancelAllPutAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update all scheduled message as cancelled Update all scheduled message as cancelled
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsCancelAllPutAsyncWithHttpInfo ()
        {

            var localVarPath = "/sms/cancel-all";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsCancelAllPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update scheduled message as cancelled Update scheduled message as cancelled
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The message ID you want to cancel</param>
        /// <returns>string</returns>
        public string SmsCancelByMessageIdPut (string messageId)
        {
             ApiResponse<string> localVarResponse = SmsCancelByMessageIdPutWithHttpInfo(messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update scheduled message as cancelled Update scheduled message as cancelled
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The message ID you want to cancel</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsCancelByMessageIdPutWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling SMSApi->SmsCancelByMessageIdPut");

            var localVarPath = "/sms/{message_id}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsCancelByMessageIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update scheduled message as cancelled Update scheduled message as cancelled
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The message ID you want to cancel</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsCancelByMessageIdPutAsync (string messageId)
        {
             ApiResponse<string> localVarResponse = await SmsCancelByMessageIdPutAsyncWithHttpInfo(messageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update scheduled message as cancelled Update scheduled message as cancelled
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The message ID you want to cancel</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsCancelByMessageIdPutAsyncWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling SMSApi->SmsCancelByMessageIdPut");

            var localVarPath = "/sms/{message_id}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsCancelByMessageIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export all sms history Export all sms history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Filename to download history as</param>
        /// <returns>string</returns>
        public string SmsHistoryExportGet (string filename)
        {
             ApiResponse<string> localVarResponse = SmsHistoryExportGetWithHttpInfo(filename);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export all sms history Export all sms history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Filename to download history as</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsHistoryExportGetWithHttpInfo (string filename)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling SMSApi->SmsHistoryExportGet");

            var localVarPath = "/sms/history/export";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filename", filename)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsHistoryExportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export all sms history Export all sms history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Filename to download history as</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsHistoryExportGetAsync (string filename)
        {
             ApiResponse<string> localVarResponse = await SmsHistoryExportGetAsyncWithHttpInfo(filename);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export all sms history Export all sms history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">Filename to download history as</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsHistoryExportGetAsyncWithHttpInfo (string filename)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling SMSApi->SmsHistoryExportGet");

            var localVarPath = "/sms/history/export";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filename", filename)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsHistoryExportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all sms history Get all sms history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Custom query Example: from:{number},status_code:201. (optional)</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        public string SmsHistoryGet (string q = null, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = SmsHistoryGetWithHttpInfo(q, dateFrom, dateTo, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all sms history Get all sms history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Custom query Example: from:{number},status_code:201. (optional)</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsHistoryGetWithHttpInfo (string q = null, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null)
        {

            var localVarPath = "/sms/history";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_from", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_to", dateTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all sms history Get all sms history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Custom query Example: from:{number},status_code:201. (optional)</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsHistoryGetAsync (string q = null, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = await SmsHistoryGetAsyncWithHttpInfo(q, dateFrom, dateTo, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all sms history Get all sms history
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Custom query Example: from:{number},status_code:201. (optional)</param>
        /// <param name="dateFrom">Start date (optional)</param>
        /// <param name="dateTo">End date (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsHistoryGetAsyncWithHttpInfo (string q = null, int? dateFrom = null, int? dateTo = null, int? page = null, int? limit = null)
        {

            var localVarPath = "/sms/history";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_from", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_to", dateTo)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all inbound sms Get all inbound sms
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Your keyword or query. (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        public string SmsInboundGet (string q = null, int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = SmsInboundGetWithHttpInfo(q, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all inbound sms Get all inbound sms
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Your keyword or query. (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsInboundGetWithHttpInfo (string q = null, int? page = null, int? limit = null)
        {

            var localVarPath = "/sms/inbound";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsInboundGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all inbound sms Get all inbound sms
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Your keyword or query. (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsInboundGetAsync (string q = null, int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = await SmsInboundGetAsyncWithHttpInfo(q, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all inbound sms Get all inbound sms
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Your keyword or query. (optional)</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsInboundGetAsyncWithHttpInfo (string q = null, int? page = null, int? limit = null)
        {

            var localVarPath = "/sms/inbound";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsInboundGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create inbound sms Create inbound sms
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>string</returns>
        public string SmsInboundPost (Url url)
        {
             ApiResponse<string> localVarResponse = SmsInboundPostWithHttpInfo(url);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create inbound sms Create inbound sms
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsInboundPostWithHttpInfo (Url url)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling SMSApi->SmsInboundPost");

            var localVarPath = "/sms/inbound";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null && url.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(url); // http body (model) parameter
            }
            else
            {
                localVarPostBody = url; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsInboundPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create inbound sms Create inbound sms
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsInboundPostAsync (Url url)
        {
             ApiResponse<string> localVarResponse = await SmsInboundPostAsyncWithHttpInfo(url);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create inbound sms Create inbound sms
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsInboundPostAsyncWithHttpInfo (Url url)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling SMSApi->SmsInboundPost");

            var localVarPath = "/sms/inbound";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null && url.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(url); // http body (model) parameter
            }
            else
            {
                localVarPostBody = url; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsInboundPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Mark inbound SMS as read Mark specific inbound SMS as read
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>string</returns>
        public string SmsInboundReadByMessageIdPut (string messageId)
        {
             ApiResponse<string> localVarResponse = SmsInboundReadByMessageIdPutWithHttpInfo(messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark inbound SMS as read Mark specific inbound SMS as read
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsInboundReadByMessageIdPutWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling SMSApi->SmsInboundReadByMessageIdPut");

            var localVarPath = "/sms/inbound-read/{message_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsInboundReadByMessageIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Mark inbound SMS as read Mark specific inbound SMS as read
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsInboundReadByMessageIdPutAsync (string messageId)
        {
             ApiResponse<string> localVarResponse = await SmsInboundReadByMessageIdPutAsyncWithHttpInfo(messageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark inbound SMS as read Mark specific inbound SMS as read
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsInboundReadByMessageIdPutAsyncWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling SMSApi->SmsInboundReadByMessageIdPut");

            var localVarPath = "/sms/inbound-read/{message_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsInboundReadByMessageIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Mark inbound SMS as read Mark all inbound SMS as read optionally before a certain date
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>string</returns>
        public string SmsInboundReadPut (DateBefore dateBefore = null)
        {
             ApiResponse<string> localVarResponse = SmsInboundReadPutWithHttpInfo(dateBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark inbound SMS as read Mark all inbound SMS as read optionally before a certain date
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsInboundReadPutWithHttpInfo (DateBefore dateBefore = null)
        {

            var localVarPath = "/sms/inbound-read";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateBefore != null && dateBefore.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateBefore); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateBefore; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsInboundReadPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Mark inbound SMS as read Mark all inbound SMS as read optionally before a certain date
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsInboundReadPutAsync (DateBefore dateBefore = null)
        {
             ApiResponse<string> localVarResponse = await SmsInboundReadPutAsyncWithHttpInfo(dateBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark inbound SMS as read Mark all inbound SMS as read optionally before a certain date
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsInboundReadPutAsyncWithHttpInfo (DateBefore dateBefore = null)
        {

            var localVarPath = "/sms/inbound-read";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateBefore != null && dateBefore.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateBefore); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateBefore; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsInboundReadPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Calculate sms price Calculate sms price
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>string</returns>
        public string SmsPricePost (SmsMessageCollection smsMessages)
        {
             ApiResponse<string> localVarResponse = SmsPricePostWithHttpInfo(smsMessages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate sms price Calculate sms price
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsPricePostWithHttpInfo (SmsMessageCollection smsMessages)
        {
            // verify the required parameter 'smsMessages' is set
            if (smsMessages == null)
                throw new ApiException(400, "Missing required parameter 'smsMessages' when calling SMSApi->SmsPricePost");

            var localVarPath = "/sms/price";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessages != null && smsMessages.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessages); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessages; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsPricePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Calculate sms price Calculate sms price
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsPricePostAsync (SmsMessageCollection smsMessages)
        {
             ApiResponse<string> localVarResponse = await SmsPricePostAsyncWithHttpInfo(smsMessages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate sms price Calculate sms price
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsPricePostAsyncWithHttpInfo (SmsMessageCollection smsMessages)
        {
            // verify the required parameter 'smsMessages' is set
            if (smsMessages == null)
                throw new ApiException(400, "Missing required parameter 'smsMessages' when calling SMSApi->SmsPricePost");

            var localVarPath = "/sms/price";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessages != null && smsMessages.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessages); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessages; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsPricePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a Specific Delivery Receipt Get a Specific Delivery Receipt
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>string</returns>
        public string SmsReceiptsByMessageIdGet (string messageId)
        {
             ApiResponse<string> localVarResponse = SmsReceiptsByMessageIdGetWithHttpInfo(messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Specific Delivery Receipt Get a Specific Delivery Receipt
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsReceiptsByMessageIdGetWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling SMSApi->SmsReceiptsByMessageIdGet");

            var localVarPath = "/sms/receipts/{message_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsReceiptsByMessageIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a Specific Delivery Receipt Get a Specific Delivery Receipt
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsReceiptsByMessageIdGetAsync (string messageId)
        {
             ApiResponse<string> localVarResponse = await SmsReceiptsByMessageIdGetAsyncWithHttpInfo(messageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Specific Delivery Receipt Get a Specific Delivery Receipt
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsReceiptsByMessageIdGetAsyncWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling SMSApi->SmsReceiptsByMessageIdGet");

            var localVarPath = "/sms/receipts/{message_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsReceiptsByMessageIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all delivery receipts Get all delivery receipts
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        public string SmsReceiptsGet (int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = SmsReceiptsGetWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all delivery receipts Get all delivery receipts
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsReceiptsGetWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/sms/receipts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsReceiptsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all delivery receipts Get all delivery receipts
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsReceiptsGetAsync (int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = await SmsReceiptsGetAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all delivery receipts Get all delivery receipts
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsReceiptsGetAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/sms/receipts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsReceiptsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add a delivery receipt Add a delivery receipt
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>string</returns>
        public string SmsReceiptsPost (Url url)
        {
             ApiResponse<string> localVarResponse = SmsReceiptsPostWithHttpInfo(url);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a delivery receipt Add a delivery receipt
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsReceiptsPostWithHttpInfo (Url url)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling SMSApi->SmsReceiptsPost");

            var localVarPath = "/sms/receipts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null && url.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(url); // http body (model) parameter
            }
            else
            {
                localVarPostBody = url; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsReceiptsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add a delivery receipt Add a delivery receipt
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsReceiptsPostAsync (Url url)
        {
             ApiResponse<string> localVarResponse = await SmsReceiptsPostAsyncWithHttpInfo(url);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a delivery receipt Add a delivery receipt
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">Url model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsReceiptsPostAsyncWithHttpInfo (Url url)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling SMSApi->SmsReceiptsPost");

            var localVarPath = "/sms/receipts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null && url.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(url); // http body (model) parameter
            }
            else
            {
                localVarPostBody = url; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsReceiptsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Mark delivery receipts as read Mark delivery receipts as read
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>string</returns>
        public string SmsReceiptsReadPut (DateBefore dateBefore = null)
        {
             ApiResponse<string> localVarResponse = SmsReceiptsReadPutWithHttpInfo(dateBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark delivery receipts as read Mark delivery receipts as read
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsReceiptsReadPutWithHttpInfo (DateBefore dateBefore = null)
        {

            var localVarPath = "/sms/receipts-read";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateBefore != null && dateBefore.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateBefore); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateBefore; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsReceiptsReadPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Mark delivery receipts as read Mark delivery receipts as read
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsReceiptsReadPutAsync (DateBefore dateBefore = null)
        {
             ApiResponse<string> localVarResponse = await SmsReceiptsReadPutAsyncWithHttpInfo(dateBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark delivery receipts as read Mark delivery receipts as read
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateBefore">DateBefore model (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsReceiptsReadPutAsyncWithHttpInfo (DateBefore dateBefore = null)
        {

            var localVarPath = "/sms/receipts-read";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateBefore != null && dateBefore.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateBefore); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateBefore; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsReceiptsReadPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send sms message(s)  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.* 
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>string</returns>
        public string SmsSendPost (SmsMessageCollection smsMessages)
        {
             ApiResponse<string> localVarResponse = SmsSendPostWithHttpInfo(smsMessages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send sms message(s)  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.* 
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsSendPostWithHttpInfo (SmsMessageCollection smsMessages)
        {
            // verify the required parameter 'smsMessages' is set
            if (smsMessages == null)
                throw new ApiException(400, "Missing required parameter 'smsMessages' when calling SMSApi->SmsSendPost");

            var localVarPath = "/sms/send";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessages != null && smsMessages.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessages); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessages; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsSendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send sms message(s)  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.* 
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsSendPostAsync (SmsMessageCollection smsMessages)
        {
             ApiResponse<string> localVarResponse = await SmsSendPostAsyncWithHttpInfo(smsMessages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send sms message(s)  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.* 
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessages">SmsMessageCollection model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsSendPostAsyncWithHttpInfo (SmsMessageCollection smsMessages)
        {
            // verify the required parameter 'smsMessages' is set
            if (smsMessages == null)
                throw new ApiException(400, "Missing required parameter 'smsMessages' when calling SMSApi->SmsSendPost");

            var localVarPath = "/sms/send";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessages != null && smsMessages.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessages); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessages; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsSendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete sms template Delete sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <returns>string</returns>
        public string SmsTemplatesByTemplateIdDelete (int? templateId)
        {
             ApiResponse<string> localVarResponse = SmsTemplatesByTemplateIdDeleteWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete sms template Delete sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsTemplatesByTemplateIdDeleteWithHttpInfo (int? templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SMSApi->SmsTemplatesByTemplateIdDelete");

            var localVarPath = "/sms/templates/{template_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsTemplatesByTemplateIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete sms template Delete sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsTemplatesByTemplateIdDeleteAsync (int? templateId)
        {
             ApiResponse<string> localVarResponse = await SmsTemplatesByTemplateIdDeleteAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete sms template Delete sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsTemplatesByTemplateIdDeleteAsyncWithHttpInfo (int? templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SMSApi->SmsTemplatesByTemplateIdDelete");

            var localVarPath = "/sms/templates/{template_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsTemplatesByTemplateIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update sms template Update sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <param name="smsTemplate">Template item</param>
        /// <returns>string</returns>
        public string SmsTemplatesByTemplateIdPut (int? templateId, SmsTemplate smsTemplate)
        {
             ApiResponse<string> localVarResponse = SmsTemplatesByTemplateIdPutWithHttpInfo(templateId, smsTemplate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update sms template Update sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <param name="smsTemplate">Template item</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsTemplatesByTemplateIdPutWithHttpInfo (int? templateId, SmsTemplate smsTemplate)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SMSApi->SmsTemplatesByTemplateIdPut");
            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
                throw new ApiException(400, "Missing required parameter 'smsTemplate' when calling SMSApi->SmsTemplatesByTemplateIdPut");

            var localVarPath = "/sms/templates/{template_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (smsTemplate != null && smsTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsTemplate; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsTemplatesByTemplateIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update sms template Update sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <param name="smsTemplate">Template item</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsTemplatesByTemplateIdPutAsync (int? templateId, SmsTemplate smsTemplate)
        {
             ApiResponse<string> localVarResponse = await SmsTemplatesByTemplateIdPutAsyncWithHttpInfo(templateId, smsTemplate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update sms template Update sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id</param>
        /// <param name="smsTemplate">Template item</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsTemplatesByTemplateIdPutAsyncWithHttpInfo (int? templateId, SmsTemplate smsTemplate)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SMSApi->SmsTemplatesByTemplateIdPut");
            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
                throw new ApiException(400, "Missing required parameter 'smsTemplate' when calling SMSApi->SmsTemplatesByTemplateIdPut");

            var localVarPath = "/sms/templates/{template_id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (smsTemplate != null && smsTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsTemplate; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsTemplatesByTemplateIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get lists of all sms templates Get lists of all sms templates
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>string</returns>
        public string SmsTemplatesGet (int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = SmsTemplatesGetWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get lists of all sms templates Get lists of all sms templates
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsTemplatesGetWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/sms/templates";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get lists of all sms templates Get lists of all sms templates
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsTemplatesGetAsync (int? page = null, int? limit = null)
        {
             ApiResponse<string> localVarResponse = await SmsTemplatesGetAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get lists of all sms templates Get lists of all sms templates
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">Number of records per page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsTemplatesGetAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/sms/templates";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create sms template Create sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate">SmsTemplate model</param>
        /// <returns>string</returns>
        public string SmsTemplatesPost (SmsTemplate smsTemplate)
        {
             ApiResponse<string> localVarResponse = SmsTemplatesPostWithHttpInfo(smsTemplate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create sms template Create sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate">SmsTemplate model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsTemplatesPostWithHttpInfo (SmsTemplate smsTemplate)
        {
            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
                throw new ApiException(400, "Missing required parameter 'smsTemplate' when calling SMSApi->SmsTemplatesPost");

            var localVarPath = "/sms/templates";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsTemplate != null && smsTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsTemplate; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create sms template Create sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate">SmsTemplate model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsTemplatesPostAsync (SmsTemplate smsTemplate)
        {
             ApiResponse<string> localVarResponse = await SmsTemplatesPostAsyncWithHttpInfo(smsTemplate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create sms template Create sms template
        /// </summary>
        /// <exception cref="IO.ClickSend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsTemplate">SmsTemplate model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsTemplatesPostAsyncWithHttpInfo (SmsTemplate smsTemplate)
        {
            // verify the required parameter 'smsTemplate' is set
            if (smsTemplate == null)
                throw new ApiException(400, "Missing required parameter 'smsTemplate' when calling SMSApi->SmsTemplatesPost");

            var localVarPath = "/sms/templates";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsTemplate != null && smsTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsTemplate; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
